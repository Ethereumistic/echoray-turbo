// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// This is a stub model.
// Delete it and add your own Prisma models.
model Page {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model User {
  id                 String               @id @unique
  email              String               @unique
  name               String?
  surveyResponses    SurveyResponse[]
  qrCodes            QrCode[]
  threatMonitorUsage ThreatMonitorUsage[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  // Company relationships
  ownedCompanies        Company[]          @relation("CompanyOwner")
  companyMemberships    CompanyMember[]
  departmentMemberships DepartmentMember[]
  userRoles             UserRole[]

  // Invitation relationships
  sentInvitations     CompanyInvitation[] @relation("InvitationsSent")
  receivedInvitations CompanyInvitation[] @relation("InvitationsReceived")
}

model Company {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Owner relationship
  owner   User   @relation("CompanyOwner", fields: [ownerId], references: [id])
  ownerId String

  // Company settings
  settings  Json?    @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  members     CompanyMember[]
  departments Department[]
  roles       Role[]
  invitations CompanyInvitation[]

  @@index([ownerId])
  @@map("companies")
}

model CompanyMember {
  id String @id @default(cuid())

  // Relations
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  // Member status
  status   MemberStatus @default(ACTIVE)
  joinedAt DateTime     @default(now())
  leftAt   DateTime?

  // Permissions at company level
  isAdmin Boolean @default(false)

  @@unique([companyId, userId])
  @@index([companyId])
  @@index([userId])
  @@map("company_members")
}

model Department {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Company relation
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  // Department hierarchy (optional - for nested departments)
  parent   Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  parentId String?
  children Department[] @relation("DepartmentHierarchy")

  // Department settings
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  members DepartmentMember[]
  roles   Role[]

  @@unique([companyId, name]) // Department names must be unique within a company
  @@index([companyId])
  @@index([parentId])
  @@map("departments")
}

model DepartmentMember {
  id String @id @default(cuid())

  // Relations
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  // Member status
  status   MemberStatus @default(ACTIVE)
  joinedAt DateTime     @default(now())
  leftAt   DateTime?

  // Department-specific permissions
  isManager Boolean @default(false)

  @@unique([departmentId, userId])
  @@index([departmentId])
  @@index([userId])
  @@map("department_members")
}

model Role {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Scope - roles can be company-wide or department-specific
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String?

  // Role settings
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  permissions RolePermission[]
  userRoles   UserRole[]

  @@unique([companyId, name]) // Role names must be unique within a company
  @@index([companyId])
  @@index([departmentId])
  @@map("roles")
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "time_tracker.create", "reports.view", "users.manage"
  description String?
  category    String // e.g., "time_tracker", "reports", "admin"

  createdAt DateTime @default(now())

  // Relationships
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id String @id @default(cuid())

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  // Permission settings (for future flexibility)
  canCreate Boolean @default(false)
  canRead   Boolean @default(false)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model UserRole {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  // Role assignment details
  assignedAt DateTime  @default(now())
  assignedBy String? // userId of who assigned this role
  expiresAt  DateTime? // for temporary roles
  isActive   Boolean   @default(true)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

model SurveyResponse {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String
  surveyType String[] // ["websites", "intelligence", "video"]

  // Generic fields applicable to all survey types
  projectPurpose String?
  features       String[]
  priorities     String[]
  businessGoals  String?
  competitors    String[]
  timeline       String?
  budget         String?
  additionalInfo String?

  // Website-specific fields
  websiteType String? // "e-commerce", "portfolio", "blog", "corporate", etc.
  designStyle String? // "modern", "minimalist", "corporate", "creative", etc.
  platforms   String[] // ["web", "mobile", "responsive"]

  // Intelligence/AI-specific fields
  aiUseCase    String? // "automation", "analysis", "chatbot", "recommendation", etc.
  dataTypes    String[] // ["text", "images", "video", "audio", "structured"]
  integrations String[] // ["api", "database", "crm", "analytics"]

  // Video-specific fields
  videoType     String? // "promotional", "educational", "entertainment", "documentary", etc.
  videoDuration String? // "short-form", "medium-form", "long-form"
  videoStyle    String? // "animated", "live-action", "motion-graphics", "mixed"
  deliverables  String[] // ["script", "storyboard", "editing", "effects", "voiceover"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model QrCode {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String
  title  String? // Optional title for the QR code
  data   String // The actual data encoded in the QR code (URL, text, etc.)
  qrType String  @default("text") // "url", "text", "email", "phone", "wifi", etc.

  // QR Code settings
  size       Int    @default(200) // Size in pixels
  errorLevel String @default("M") // L, M, Q, H

  // Optional styling (stored as JSON string)
  foregroundColor String? @default("#000000")
  backgroundColor String? @default("#ffffff")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ThreatMonitorUsage {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  endpoint  String // "ip-reputation", "url-scan", "domain-intel", "port-scan"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, endpoint])
  @@index([createdAt])
}

model CompanyInvitation {
  id String @id @default(cuid())

  // Company and inviter
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  invitedBy   User    @relation("InvitationsSent", fields: [invitedById], references: [id])
  invitedById String

  // Invitation details
  email   String
  message String?
  role    InvitationRole @default(MEMBER)
  isAdmin Boolean        @default(false)

  // Status and timing
  status      InvitationStatus @default(PENDING)
  invitedAt   DateTime         @default(now())
  expiresAt   DateTime // Invitations expire after X days
  respondedAt DateTime?

  // If accepted, link to the user
  acceptedBy   User?   @relation("InvitationsReceived", fields: [acceptedById], references: [id])
  acceptedById String?

  @@unique([companyId, email]) // One pending invitation per company per email
  @@index([companyId])
  @@index([email])
  @@index([invitedById])
  @@index([acceptedById])
  @@index([status])
  @@map("company_invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum InvitationRole {
  MEMBER
  ADMIN
  MANAGER
}
